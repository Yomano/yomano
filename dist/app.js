// Generated by CoffeeScript 1.10.0
(function() {
  var Progress, base_prompt, chalk, commander, copyFile, execSync, executeEvents, fs, globby, mkdirp, pack, pack_name, path, preprocess, prompt,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  commander = require('commander');

  chalk = require('chalk');

  prompt = require('prompt');

  globby = require('globby');

  path = require('path');

  fs = require('fs');

  Progress = require('progress');

  mkdirp = require('mkdirp');

  preprocess = require('preprocess').preprocessFile;

  execSync = require('child_process').execSync;

  pack_name = 'xhex';

  pack = require("aaa-" + pack_name)(chalk);

  console.log("\nInstalling: " + (chalk.cyan(pack.name)) + "\n\n" + pack.description + "\n\n");

  base_prompt = [
    {
      name: "name",
      description: 'Application name',
      type: 'string',
      pattern: /^\w+$/,
      message: 'Can\'t be empty',
      "default": path.basename(process.cwd()),
      required: true
    }
  ];

  copyFile = function(source, target, context, opt, cb) {
    var cbCalled, done;
    cbCalled = false;
    done = function(err) {
      if (!cbCalled) {
        if (typeof cb === "function") {
          cb(err);
        }
        return cbCalled = true;
      }
    };
    return mkdirp(path.dirname(target), function(err) {
      var rd, wr;
      if (err) {
        return done(err);
      }
      if (indexOf.call(opt, 'final') >= 0) {
        rd = fs.createReadStream(source);
        rd.on("error", function(err) {
          return done(err);
        });
        wr = fs.createWriteStream(target);
        wr.on("error", function(err) {
          return done(err);
        });
        wr.on("close", function(ex) {
          return done();
        });
        return rd.pipe(wr);
      } else {
        return preprocess(source, target, context, done, {
          type: 'js'
        });
      }
    });
  };

  executeEvents = function(ev, context) {
    var code, i, l, len, r, results;
    if (ev != null) {
      r = ev(context);
      if (Array.isArray(r)) {
        results = [];
        for (i = 0, len = r.length; i < len; i++) {
          l = r[i];
          if (typeof l === 'function') {
            results.push(l());
          } else {
            console.log(l);
            results.push(code = execSync(l));
          }
        }
        return results;
      }
    }
  };

  executeEvents(pack.init);

  prompt.start();

  prompt.get(base_prompt.concat(pack.prompt), function(err, result) {
    var bar, context, file, i, j, k, len, len1, len2, len3, m, mark, n, op, opt, ref, ref1, ref2, ref3, results, s, target;
    context = {
      platform: process.platform,
      source: path.join(path.dirname(require.resolve("aaa-" + pack_name)), 'source'),
      dest: process.cwd(),
      name: result.name,
      form: result,
      filters: ['**/*', '**/.*']
    };
    ref = pack.special;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      ref1 = s[1].split(';');
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        op = ref1[j];
        if (op.slice(0, 3) === 'if:') {
          if (!context.form[op.slice(3)]) {
            context.filters.push("!" + s[0]);
          }
        }
      }
    }
    executeEvents(pack.after_prompt, context);
    context.files = globby.sync(context.filters, {
      cwd: context.source,
      nodir: true
    });
    executeEvents(pack.before_copy, context);
    bar = new Progress('copying [:bar] :percent', {
      total: context.files.length,
      width: 40,
      callback: function() {
        executeEvents(pack.after_copy, context);
        return executeEvents(pack.say_bye, context);
      }
    });
    ref2 = context.files;
    results = [];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      file = ref2[k];
      opt = [];
      target = file;
      ref3 = pack.special;
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        s = ref3[n];
        if (s[0] === file) {
          opt = s[1].split(';');
        }
      }
      mark = /\{(\w+)\}/g;
      while ((m = mark.exec(file)) != null) {
        target = target.replace('{' + m[1] + '}', context.form[m[1]]);
      }
      results.push(copyFile(path.join(context.source, file), path.join(context.dest, target), context, opt, function() {
        return bar.tick();
      }));
    }
    return results;
  });

}).call(this);
